1)api hidden endpoints/parameter find
/api/v2/some?id=1    fuzz separately v0,v1,v2,..,  $id$ & no. id=$1$
if you find any parameter then fuzz with any other like if ?file=1 500 internal server why 500 error cause of file name not provided instead id no. 1.
then fuzz ?file=/etc/passwd like that
try xss,sqli,ssrf.ssti,lfi,etc

use burp content discovery in engagements
param miner,gap in burp {use result param with below tools}
use arjun, x8 tool
use paramalyzer to analyze parameter

2)js 
jslinkfinder to get all js and manually find all secrets & hidden parameter in js through burp to automate stuff again use the jslinkfinder 3rd level js's make sure inscope
steps
in burp run live passive scan with inscope rule 
turn on jslinkfinder
then goto targets and search .js select all to scan passive (if we scan from selecting burp history will create duplicate same urls more request & time)
export the results

use jsminer with above
Burp Suite's built-in tools like "Engagement tools -> Find comments" can also help.

Analyzing External Sources Concept: Parameters might be documented or exposed in places outside the main application.
Sources:
API Documentation,GitHub/GitLab Repositories,Wayback Machine,Google Dorking

3)reflected parameter
reflected parameter tool in burp tool to find reflected parameters then try xss,lfi,rce,collabifilator,ssrf,ssti
use paramalyzer to analyze parameter

4)at the final do http request smuggler

5)at the end activescan++

6)turn on burp collab everywhere and browse that it  for find blind ssrf,xss

7)path traversal in api
https://samcurry.net/hacking-starbucks
/bff/proxy/id like bff is backend for frontend so it was made a request to internal
so fuzz id before jump into that try find how many paths is present
like try ../ look response got 404 then ../../ response 404 then do like till the result 400
to find how many directory is present. if 400 was result of a 7 "../../" then 6 directory was present


