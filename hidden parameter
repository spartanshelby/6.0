 Finding a hidden parameter is just step one; the critical step is testing it to see if it's vulnerable.
 
### 1. Insecure Direct Object References (IDOR) - The Most Common Find

This is the most likely vulnerability you'll find with a parameter like `user_id`.

*   **What to do:** If the `user_id` parameter is used to fetch or display user-specific data, change its value to that of another user.
    *   **Example:** You are user `12345`. The hidden parameter is `<input type="hidden" name="user_id" value="12345">`. Change `POST` or `GET` data to `user_id=67890`.

### 2. Privilege Escalation

Sometimes, `user_id` or similar parameters might be used for authorization checks.

*   **What to do:** If you find a hidden parameter like `role`, `is_admin`, `access_level`, or even `user_id` pointing to an administrator, try manipulating it.
    *   **Example:** You find `user_id=5` and you suspect `user_id=1` is the admin. Change the value to `1`.

### 3. Parameter Pollution & Business Logic Flaws `user_id=12345&user_id=67890`. 



1.  **Identify the Request:** Note which request (e.g., `POST /update_profile`) contains the hidden `user_id` parameter.
2.  **Baseline the Response:** Send the normal request and note the response.
3.  **Modify and Observe:**
    *   **Change the value:** Increment/decrement it (`12345` -> `12346`). Do you see another user's data?
    *   **Fuzz for SQLI:** Send `user_id=12345'`, `user_id=12345 SLEEP(5)-- -`, etc. Look for errors or delays.
    *   **Fuzz for XSS:** Send `user_id=<img src=x onerror=alert('XSS')>`.
    *   **Break the Logic:** Send negative numbers, huge numbers, or non-integers.
    *   **Check for Mass Assignment:** Add a new parameter like `&is_admin=true` to the request *along with* the changed `user_id`.
4.  **Automate (Optional):** Use Burp Intruder to quickly test a list of common user IDs (e.g., 1 through 1000) to scan for accessible records.

**In summary: A hidden parameter is a direct invitation to test the application's trust boundaries. Your job is to answer the question: "What happens if I change this?" The answer could be nothing, or it could be a critical vulnerability.**
